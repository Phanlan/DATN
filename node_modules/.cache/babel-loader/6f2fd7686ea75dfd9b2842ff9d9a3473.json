{"ast":null,"code":"import _objectSpread from \"D:/eway/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"D:/eway/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/eway/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/eway/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Const, ServiceHandle } from '../utilities';\nexport var GeoService = /*#__PURE__*/function () {\n  function GeoService() {\n    _classCallCheck(this, GeoService);\n  }\n\n  _createClass(GeoService, [{\n    key: \"getGeo\",\n    value: function getGeo(geoId) {\n      return ServiceHandle.get(Const.API.Geos + \"/\".concat(geoId)).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * \r\n     * @param {*} params \r\n     * @returns Page{geoList(geoId, geoName...), totalRecords}\r\n     */\n\n  }, {\n    key: \"getGeos\",\n    value: function getGeos(params) {\n      return ServiceHandle.get(Const.API.Geos, {\n        params: params\n      }).then(function (res) {\n        var _data = _toConsumableArray(res.data);\n\n        _data.map(function (item) {\n          return item.geoName = item.geoNameLocal ? item.geoNameLocal : item.geoName;\n        });\n\n        return {\n          geoList: res.data,\n          totalRecords: res.headers['x-total-count']\n        };\n      });\n    }\n    /**\r\n     * non paging\r\n     */\n\n  }, {\n    key: \"getGeoRegionList\",\n    value: function getGeoRegionList(geoId, params) {\n      var _params = _objectSpread(_objectSpread({}, params), {}, {\n        geoId: geoId\n      });\n\n      return ServiceHandle.get(Const.API.Geos + \"/\".concat(geoId, \"/regions\"), {\n        params: _params\n      }).then(function (res) {\n        return res.data.resultList;\n      });\n    }\n  }, {\n    key: \"getCountries\",\n    value: function getCountries(params) {\n      var _params = _objectSpread(_objectSpread({}, {\n        'geoTypeEnumId': 'GEOT_COUNTRY',\n        'pageNoLimit': true\n      }), params); // merge all\n\n\n      return this.getGeos(_params);\n    }\n  }]);\n\n  return GeoService;\n}();","map":{"version":3,"sources":["D:/eway/src/service/GeoService.js"],"names":["Const","ServiceHandle","GeoService","geoId","get","API","Geos","then","res","data","params","_data","map","item","geoName","geoNameLocal","geoList","totalRecords","headers","_params","resultList","getGeos"],"mappings":";;;;AAAA,SAASA,KAAT,EAAgBC,aAAhB,QAAqC,cAArC;AAEA,WAAaC,UAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAEI,gBAAOC,KAAP,EAAc;AACV,aAAOF,aAAa,CAACG,GAAd,CAAkBJ,KAAK,CAACK,GAAN,CAAUC,IAAV,cAAqBH,KAArB,CAAlB,EAAgDI,IAAhD,CAAqD,UAAAC,GAAG,EAAI;AAC/D,eAAOA,GAAG,CAACC,IAAX;AACH,OAFM,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;AAZA;AAAA;AAAA,WAaK,iBAAQC,MAAR,EAAgB;AACb,aAAOT,aAAa,CAACG,GAAd,CAAkBJ,KAAK,CAACK,GAAN,CAAUC,IAA5B,EAAkC;AAAEI,QAAAA,MAAM,EAAEA;AAAV,OAAlC,EAAsDH,IAAtD,CAA2D,UAAAC,GAAG,EAAI;AACrE,YAAIG,KAAK,sBAAKH,GAAG,CAACC,IAAT,CAAT;;AACAE,QAAAA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AACd,iBAAQA,IAAI,CAACC,OAAL,GAAiBD,IAAI,CAACE,YAAL,GAAmBF,IAAI,CAACE,YAAxB,GAAsCF,IAAI,CAACC,OAApE;AACD,SAFH;;AAIA,eAAO;AACHE,UAAAA,OAAO,EAAER,GAAG,CAACC,IADV;AAEHQ,UAAAA,YAAY,EAAET,GAAG,CAACU,OAAJ,CAAY,eAAZ;AAFX,SAAP;AAIH,OAVM,CAAP;AAWH;AAED;AACJ;AACA;;AA7BA;AAAA;AAAA,WA8BI,0BAAiBf,KAAjB,EAAwBO,MAAxB,EAAgC;AAC5B,UAAIS,OAAO,mCAAOT,MAAP;AAAeP,QAAAA,KAAK,EAALA;AAAf,QAAX;;AACA,aAAOF,aAAa,CAACG,GAAd,CAAkBJ,KAAK,CAACK,GAAN,CAAUC,IAAV,cAAqBH,KAArB,aAAlB,EAAwD;AAAEO,QAAAA,MAAM,EAAES;AAAV,OAAxD,EAA6EZ,IAA7E,CAAkF,UAAAC,GAAG,EAAI;AAC5F,eAAOA,GAAG,CAACC,IAAJ,CAASW,UAAhB;AACH,OAFM,CAAP;AAGH;AAnCL;AAAA;AAAA,WAqCI,sBAAaV,MAAb,EAAqB;AACjB,UAAIS,OAAO,mCAAQ;AAAE,yBAAiB,cAAnB;AAAmC,uBAAe;AAAlD,OAAR,GAAqET,MAArE,CAAX,CADiB,CACyE;;;AAC1F,aAAO,KAAKW,OAAL,CAAaF,OAAb,CAAP;AACH;AAxCL;;AAAA;AAAA","sourcesContent":["import { Const, ServiceHandle } from '../utilities';\r\n\r\nexport class GeoService {\r\n    \r\n    getGeo(geoId) {\r\n        return ServiceHandle.get(Const.API.Geos + `/${geoId}`).then(res => {\r\n            return res.data\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} params \r\n     * @returns Page{geoList(geoId, geoName...), totalRecords}\r\n     */\r\n     getGeos(params) {\r\n        return ServiceHandle.get(Const.API.Geos, { params: params }).then(res => {\r\n            let _data=[...res.data]\r\n            _data.map(item => {\r\n                return (item.geoName =  (item.geoNameLocal? item.geoNameLocal: item.geoName));\r\n              });\r\n              \r\n            return {\r\n                geoList: res.data,\r\n                totalRecords: res.headers['x-total-count']\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * non paging\r\n     */\r\n    getGeoRegionList(geoId, params) {\r\n        let _params = {...params, geoId};\r\n        return ServiceHandle.get(Const.API.Geos + `/${geoId}/regions`, { params: _params }).then(res => {\r\n            return res.data.resultList;\r\n        });\r\n    }\r\n\r\n    getCountries(params) {\r\n        let _params = { ...{ 'geoTypeEnumId': 'GEOT_COUNTRY', 'pageNoLimit': true }, ...params }; // merge all\r\n        return this.getGeos(_params);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}