{"ast":null,"code":"import _objectSpread from \"D:/eway/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"D:/eway/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"D:/eway/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\eway\\\\src\\\\components\\\\facility\\\\TelecomNumberEdit.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"D:\\\\eway\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from \"react-i18next\";\nimport PropTypes from 'prop-types';\nimport { Toast } from 'primereact/toast';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\nimport { FacilityService } from '../../service/FacilityService';\nimport { ContactMechService } from '../../service/ContactMechService';\nimport { GeoService } from '../../service/GeoService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var TelecomNumberEdit = function TelecomNumberEdit(props) {\n  _s();\n\n  var telecomNumber = props.telecomNumber; // let emptyTelecomNumber = {\n  //     \"facilityId\": \"\",\n  //     \"contactMechId\": \"\",\n  //     \"contactMechPurposeId\": \"\",\n  //     \"countryCode\": \"\",\n  //     \"areaCode\": \"\",\n  //     \"contactNumber\": \"\",\n  //     \"askForName\": \"\"\n  // }\n\n  var toast = useRef(null);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; //\n  // const [telecomNumber, setTelecomNumber] = useState(emptyTelecomNumber);\n\n\n  var _useState = useState([{}]),\n      _useState2 = _slicedToArray(_useState, 2),\n      countries = _useState2[0],\n      setCountries = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      contactMechPurposes = _useState4[0],\n      setContactMechPurposes = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      saveLoading = _useState6[0],\n      setSaveLoading = _useState6[1];\n\n  useEffect(function () {\n    // let _telcomNumber = {...emptyTelecomNumber, ...props.telecomNumber};\n    // setTelecomNumber(_telcomNumber);\n    // \n    var contactMechService = new ContactMechService();\n    var geoService = new GeoService();\n\n    var getAllContactMechPurposes = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contactMechService.getPurposeByTelecomNumbers().then(function (data) {\n                  return setContactMechPurposes(data.contactMechPurposeList);\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getAllContactMechPurposes() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var getCountries = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                geoService.getCountries().then(function (data) {\n                  var _countryList = data.geoList.filter(function (item) {\n                    return item.countryCode;\n                  }); // just have country code\n\n\n                  setCountries(_countryList);\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function getCountries() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getAllContactMechPurposes();\n    getCountries();\n    return function () {\n      // setTelecomNumber({});\n      setContactMechPurposes([{}]);\n      setCountries([{}]);\n    };\n  }, []);\n\n  var saveTelecomNumber = function saveTelecomNumber() {\n    var facilityService = new FacilityService();\n    var contactMechService = new ContactMechService();\n    setSaveLoading(true);\n\n    if (telecomNumber.contactMechId) {\n      // update case\n      facilityService.updateTelecomNumber(telecomNumber.facilityId, telecomNumber.contactMechId, telecomNumber).then(function (data) {\n        toast.current.show({\n          severity: 'success',\n          summary: 'Successful',\n          detail: t('common:facility.telecomNumber.updated'),\n          life: 5000\n        });\n        props.onSave(telecomNumber); // callback\n\n        setSaveLoading(false);\n      });\n    } else {\n      // create new\n      contactMechService.createTelecomNumber(telecomNumber).then(function (data) {\n        toast.current.show({\n          severity: 'success',\n          summary: 'Successful',\n          detail: t('common:facility.telecomNumber.created'),\n          life: 5000\n        });\n        props.onSave(telecomNumber); // callback\n\n        setSaveLoading(false);\n      });\n    }\n  };\n\n  var cancelTelecomNumber = function cancelTelecomNumber() {\n    props.onCancel(telecomNumber); // callback\n  };\n\n  var onInputChange = function onInputChange(e, name) {\n    var val = e.target && e.target.value || '';\n\n    var _telecomNumber = _objectSpread({}, telecomNumber);\n\n    _telecomNumber[\"\".concat(name)] = val; // setTelecomNumber(_telecomNumber);\n  };\n\n  var countryOptionTemplate = function countryOptionTemplate(option) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"country-item\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"(+\", option.countryCode, \") \", option.geoName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, _this);\n  };\n\n  var selectedCountryTemplate = function selectedCountryTemplate(option) {\n    if (option) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"country-item country-item-value\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"(+\", option.countryCode, \") \", option.geoName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, _this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(Toast, {\n        ref: toast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-fluid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"contactMechPurposeId\",\n            children: t('common:facility.telecomNumber.contactMechPurposeId')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Dropdown, {\n            id: \"contactMechPurposeId\",\n            value: telecomNumber.contactMechPurposeId,\n            options: contactMechPurposes,\n            optionValue: \"contactMechPurposeId\",\n            optionLabel: \"description\",\n            onChange: function onChange(e) {\n              return onInputChange(e, 'contactMechPurposeId');\n            },\n            showClear: true,\n            filter: true,\n            filterBy: \"description\",\n            disabled: !!telecomNumber.contactMechId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"countryCode\",\n            children: t('common:facility.telecomNumber.countryCode')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Dropdown, {\n            id: \"countryCode\",\n            value: telecomNumber.countryCode,\n            options: countries,\n            optionValue: \"countryCode\",\n            optionLabel: \"geoName\",\n            onChange: function onChange(e) {\n              return onInputChange(e, 'countryCode');\n            },\n            showClear: true,\n            filter: true,\n            filterBy: \"geoName\",\n            itemTemplate: countryOptionTemplate,\n            valueTemplate: selectedCountryTemplate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"areaCode\",\n            children: t('common:facility.telecomNumber.areaCode')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(InputText, {\n            id: \"areaCode\",\n            value: telecomNumber.areaCode,\n            onChange: function onChange(e) {\n              return onInputChange(e, 'areaCode');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"contactNumber\",\n            children: t('common:facility.telecomNumber.contactNumber')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(InputText, {\n            id: \"contactNumber\",\n            value: telecomNumber.contactNumber,\n            onChange: function onChange(e) {\n              return onInputChange(e, 'contactNumber');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"askForName\",\n            children: t('common:facility.telecomNumber.askForName')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(InputText, {\n            id: \"askForName\",\n            value: telecomNumber.askForName,\n            onChange: function onChange(e) {\n              return onInputChange(e, 'askForName');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"p-buttonset\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            label: t('common:facility.telecomNumber.save'),\n            icon: \"pi pi-check\",\n            className: \"p-mr-2\",\n            loading: saveLoading,\n            onClick: saveTelecomNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            label: t('common:facility.telecomNumber.cancel'),\n            icon: \"pi pi-times\",\n            className: \"p-button-text\",\n            onClick: cancelTelecomNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TelecomNumberEdit, \"CuQihdZUBD0mwdGrVgfZhoSMvnc=\", false, function () {\n  return [useTranslation];\n});\n\n_c = TelecomNumberEdit;\nTelecomNumberEdit.propTypes = {\n  facilityId: PropTypes.string,\n  partyId: PropTypes.string,\n  telecomNumber: PropTypes.object,\n  onSave: PropTypes.func\n};\nTelecomNumberEdit.defaultProps = {\n  onSave: function onSave() {}\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"TelecomNumberEdit\");","map":{"version":3,"sources":["D:/eway/src/components/facility/TelecomNumberEdit.js"],"names":["React","useState","useEffect","useRef","useTranslation","PropTypes","Toast","Button","InputText","Dropdown","FacilityService","ContactMechService","GeoService","TelecomNumberEdit","props","telecomNumber","toast","t","countries","setCountries","contactMechPurposes","setContactMechPurposes","saveLoading","setSaveLoading","contactMechService","geoService","getAllContactMechPurposes","getPurposeByTelecomNumbers","then","data","contactMechPurposeList","getCountries","_countryList","geoList","filter","item","countryCode","saveTelecomNumber","facilityService","contactMechId","updateTelecomNumber","facilityId","current","show","severity","summary","detail","life","onSave","createTelecomNumber","cancelTelecomNumber","onCancel","onInputChange","e","name","val","target","value","_telecomNumber","countryOptionTemplate","option","geoName","selectedCountryTemplate","contactMechPurposeId","areaCode","contactNumber","askForName","propTypes","string","partyId","object","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport PropTypes from 'prop-types'; \r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Dropdown } from 'primereact/dropdown';\r\n\r\nimport { FacilityService } from '../../service/FacilityService';\r\nimport { ContactMechService } from '../../service/ContactMechService';\r\nimport { GeoService } from '../../service/GeoService';\r\n\r\nexport const TelecomNumberEdit = (props) => {\r\n    const {telecomNumber} = props;\r\n\r\n    // let emptyTelecomNumber = {\r\n    //     \"facilityId\": \"\",\r\n    //     \"contactMechId\": \"\",\r\n    //     \"contactMechPurposeId\": \"\",\r\n    //     \"countryCode\": \"\",\r\n    //     \"areaCode\": \"\",\r\n    //     \"contactNumber\": \"\",\r\n    //     \"askForName\": \"\"\r\n    // }\r\n\r\n    const toast = useRef(null);\r\n    const { t } = useTranslation();\r\n    //\r\n    // const [telecomNumber, setTelecomNumber] = useState(emptyTelecomNumber);\r\n    const [countries, setCountries] = useState([{}]);\r\n    const [contactMechPurposes, setContactMechPurposes] = useState(null);\r\n    const [saveLoading, setSaveLoading] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        // let _telcomNumber = {...emptyTelecomNumber, ...props.telecomNumber};\r\n        // setTelecomNumber(_telcomNumber);\r\n        // \r\n        const contactMechService = new ContactMechService();\r\n        const geoService = new GeoService();\r\n\r\n        const getAllContactMechPurposes = async() =>{\r\n            contactMechService.getPurposeByTelecomNumbers().then(data => setContactMechPurposes(data.contactMechPurposeList));\r\n        }\r\n    \r\n        const getCountries = async() =>{\r\n            geoService.getCountries().then(data => {\r\n                let _countryList =  data.geoList.filter(item => item.countryCode); // just have country code\r\n                setCountries(_countryList)\r\n            });\r\n        }\r\n\r\n        getAllContactMechPurposes();\r\n        getCountries();\r\n        \r\n        return ()  => {\r\n            // setTelecomNumber({});\r\n            setContactMechPurposes([{}]);\r\n            setCountries([{}]);\r\n        }\r\n    },[]);\r\n    \r\n    const saveTelecomNumber = () => {\r\n        const facilityService = new FacilityService();\r\n        const contactMechService = new ContactMechService();\r\n\r\n        setSaveLoading(true);\r\n        if(telecomNumber.contactMechId){ // update case\r\n            facilityService.updateTelecomNumber(telecomNumber.facilityId, telecomNumber.contactMechId, telecomNumber).then(data => {\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: t('common:facility.telecomNumber.updated'), life: 5000 });\r\n                props.onSave(telecomNumber); // callback\r\n                setSaveLoading(false);\r\n            });\r\n        }else{ // create new\r\n                contactMechService.createTelecomNumber(telecomNumber).then(data => {\r\n                    toast.current.show({ severity: 'success', summary: 'Successful', detail: t('common:facility.telecomNumber.created'), life: 5000 });\r\n                    props.onSave(telecomNumber); // callback\r\n                    setSaveLoading(false);\r\n                });\r\n        }\r\n    }\r\n    const cancelTelecomNumber = () => {\r\n        props.onCancel(telecomNumber); // callback\r\n    }\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _telecomNumber = {...telecomNumber};\r\n        _telecomNumber[`${name}`] = val;\r\n\r\n        // setTelecomNumber(_telecomNumber);\r\n    }\r\n\r\n    const countryOptionTemplate = (option) => {\r\n        return (\r\n            <div className=\"country-item\">\r\n                <div>(+{option.countryCode}) {option.geoName}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const selectedCountryTemplate = (option) => {\r\n        if (option) {\r\n            return (\r\n                <div className=\"country-item country-item-value\">\r\n                    <div>(+{option.countryCode}) {option.geoName}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <span>empty</span>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n           <div className=\"card\">\r\n                <Toast ref={toast} />\r\n                <div className=\"p-fluid\">\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"contactMechPurposeId\">{t('common:facility.telecomNumber.contactMechPurposeId')}</label>\r\n                        <Dropdown id=\"contactMechPurposeId\" value={telecomNumber.contactMechPurposeId} options={contactMechPurposes} optionValue=\"contactMechPurposeId\" optionLabel=\"description\" \r\n                                         onChange={(e) => onInputChange(e, 'contactMechPurposeId')} showClear filter filterBy=\"description\" disabled={!!telecomNumber.contactMechId}/>\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"countryCode\">{t('common:facility.telecomNumber.countryCode')}</label>\r\n                        <Dropdown id=\"countryCode\" value={telecomNumber.countryCode} options={countries} optionValue=\"countryCode\" optionLabel=\"geoName\" \r\n                                     onChange={(e) => onInputChange(e, 'countryCode')} showClear filter filterBy=\"geoName\" itemTemplate={countryOptionTemplate} valueTemplate={selectedCountryTemplate}/>\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"areaCode\">{t('common:facility.telecomNumber.areaCode')}</label>\r\n                        <InputText id=\"areaCode\" value={telecomNumber.areaCode} onChange={(e) => onInputChange(e, 'areaCode')} />\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"contactNumber\">{t('common:facility.telecomNumber.contactNumber')}</label>\r\n                        <InputText id=\"contactNumber\" value={telecomNumber.contactNumber} onChange={(e) => onInputChange(e, 'contactNumber')} />\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"askForName\">{t('common:facility.telecomNumber.askForName')}</label>\r\n                        <InputText id=\"askForName\" value={telecomNumber.askForName} onChange={(e) => onInputChange(e, 'askForName')} />\r\n                    </div>\r\n                    <span className=\"p-buttonset\">\r\n                        <Button label={t('common:facility.telecomNumber.save')} icon=\"pi pi-check\" className=\"p-mr-2\" loading={saveLoading} onClick={saveTelecomNumber} />\r\n                        <Button label={t('common:facility.telecomNumber.cancel')} icon=\"pi pi-times\" className=\"p-button-text\" onClick={cancelTelecomNumber} />\r\n                    </span>\r\n                   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n\r\n}\r\n\r\nTelecomNumberEdit.propTypes  = {\r\n    facilityId: PropTypes.string,\r\n    partyId: PropTypes.string,\r\n    telecomNumber: PropTypes.object,\r\n    onSave: PropTypes.func\r\n};\r\n\r\nTelecomNumberEdit.defaultProps  = {\r\n    onSave: function(){}\r\n};"]},"metadata":{},"sourceType":"module"}