{"ast":null,"code":"import _classCallCheck from \"D:/eway/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/eway/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport axios from 'axios';\nimport { Const } from '.';\nimport authService from '../service/authService';\n\nvar ServiceHandle = /*#__PURE__*/function () {\n  function ServiceHandle() {\n    _classCallCheck(this, ServiceHandle);\n\n    this.api = axios.create({\n      baseURL: Const.API.BaseURL,\n      timeout: 20000,\n      header: {\n        'content-type': 'application/json'\n      }\n    }); // Add a request interceptor\n\n    this.api.interceptors.request.use(function (config) {\n      config.headers.api_key = authService.getApiKeyLocalStorage(); // ignore urls\n\n      if (config.url.endsWith('/login')) {\n        delete config.headers.api_key;\n      }\n\n      return config;\n    }, function (error) {\n      console.log(error.toJSON()); // Do something with request error\n\n      return Promise.reject(error);\n    });\n  }\n\n  _createClass(ServiceHandle, [{\n    key: \"get\",\n    value: function get() {\n      var _this$api;\n\n      return (_this$api = this.api).get.apply(_this$api, arguments);\n    }\n  }, {\n    key: \"post\",\n    value: function post() {\n      var _this$api2;\n\n      return (_this$api2 = this.api).post.apply(_this$api2, arguments);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this$api3;\n\n      return (_this$api3 = this.api).delete.apply(_this$api3, arguments);\n    }\n  }, {\n    key: \"put\",\n    value: function put() {\n      var _this$api4;\n\n      return (_this$api4 = this.api).put.apply(_this$api4, arguments);\n    }\n  }, {\n    key: \"patch\",\n    value: function patch() {\n      var _this$api5;\n\n      return (_this$api5 = this.api).patch.apply(_this$api5, arguments);\n    }\n  }]);\n\n  return ServiceHandle;\n}();\n\nexport default new ServiceHandle(); // import {create} from 'apisauce';\n// import {Const} from '.';\n// const api = create({\n//   timeout: 20000,\n//   baseURL: Const.API.BaseURL,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   withCredentials: false,\n// });\n// const returnData = (response) => {\n//   if (response.status) {\n//     if (response.status === 200) {\n//       return {\n//         data: response.data,\n//         headers: response.headers,\n//         ok: true,\n//       };\n//     } else if (response.status === 401) {\n//       return {\n//         ok: false,\n//         error: 'phiên đăng nhập hết hạn',\n//       };\n//     } else {\n//       return {\n//         ok: false,\n//         error: response.data.errors,\n//       };\n//     }\n//   } else {\n//     return {\n//       ok: false,\n//       error: 'network error',\n//     };\n//   }\n// };\n// const setHeader = (apiKey) => {\n//   api.setHeader('api_key', apiKey);\n// };\n// const get = async (url, params) => {\n//   const response = await api.get(url, params);\n//   return returnData(response);\n// };\n// const post = async (url, params) => {\n//   const response = await api.post(url, params);\n//   return returnData(response);\n// };\n// const put = async (url, params) => {\n//   const response = await api.put(url, params);\n//   return returnData(response);\n// };\n// const patch = async (url, params) => {\n//   const response = await api.patch(url, params);\n//   return returnData(response);\n// };\n// const deleteApi = async (url, params) => {\n//   const response = await api.delete(url, params);\n//   return returnData(response);\n// };\n// export {setHeader, get, post, put, patch, deleteApi};","map":{"version":3,"sources":["D:/eway/src/utilities/ServiceHandle.js"],"names":["axios","Const","authService","ServiceHandle","api","create","baseURL","API","BaseURL","timeout","header","interceptors","request","use","config","headers","api_key","getApiKeyLocalStorage","url","endsWith","error","console","log","toJSON","Promise","reject","get","post","delete","put","patch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,GAApB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;IAEMC,a;AACJ,2BAAc;AAAA;;AACZ,SAAKC,GAAL,GAAWJ,KAAK,CAACK,MAAN,CAAa;AACtBC,MAAAA,OAAO,EAAEL,KAAK,CAACM,GAAN,CAAUC,OADG;AAEtBC,MAAAA,OAAO,EAAE,KAFa;AAGtBC,MAAAA,MAAM,EAAE;AACN,wBAAgB;AADV;AAHc,KAAb,CAAX,CADY,CASZ;;AACA,SAAKN,GAAL,CAASO,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,UAAUC,MAAV,EAAkB;AAChBA,MAAAA,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBd,WAAW,CAACe,qBAAZ,EAAzB,CADgB,CAGhB;;AACA,UAAGH,MAAM,CAACI,GAAP,CAAWC,QAAX,CAAoB,QAApB,CAAH,EAAiC;AAC/B,eAAOL,MAAM,CAACC,OAAP,CAAeC,OAAtB;AACD;;AACD,aAAOF,MAAP;AACD,KATH,EAUE,UAAUM,KAAV,EAAiB;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,EAAZ,EADe,CAEf;;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,KAdH;AAgBD;;;;WAED,eAAY;AAAA;;AACV,aAAO,kBAAKhB,GAAL,EAASsB,GAAT,4BAAP;AACD;;;WAED,gBAAa;AAAA;;AACX,aAAO,mBAAKtB,GAAL,EAASuB,IAAT,6BAAP;AACD;;;WAED,mBAAe;AAAA;;AACb,aAAO,mBAAKvB,GAAL,EAASwB,MAAT,6BAAP;AACD;;;WAED,eAAY;AAAA;;AACV,aAAO,mBAAKxB,GAAL,EAASyB,GAAT,6BAAP;AACD;;;WACD,iBAAc;AAAA;;AACZ,aAAO,mBAAKzB,GAAL,EAAS0B,KAAT,6BAAP;AACD;;;;;;AAGH,eAAe,IAAI3B,aAAJ,EAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import axios from 'axios';\r\nimport {Const} from '.';\r\nimport authService from '../service/authService';\r\n\r\nclass ServiceHandle {\r\n  constructor() {\r\n    this.api = axios.create({\r\n      baseURL: Const.API.BaseURL,\r\n      timeout: 20000,\r\n      header: {\r\n        'content-type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Add a request interceptor\r\n    this.api.interceptors.request.use(\r\n      function (config) {\r\n        config.headers.api_key = authService.getApiKeyLocalStorage();\r\n\r\n        // ignore urls\r\n        if(config.url.endsWith('/login')){\r\n          delete config.headers.api_key;\r\n        }\r\n        return config;\r\n      },\r\n      function (error) {\r\n        console.log(error.toJSON());\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n      },\r\n    );\r\n  }\r\n\r\n  get(...arg) {\r\n    return this.api.get(...arg);\r\n  }\r\n\r\n  post(...arg) {\r\n    return this.api.post(...arg);\r\n  }\r\n\r\n  delete(...arg) {\r\n    return this.api.delete(...arg);\r\n  }\r\n\r\n  put(...arg) {\r\n    return this.api.put(...arg);\r\n  }\r\n  patch(...arg) {\r\n    return this.api.patch(...arg);\r\n  }\r\n}\r\n\r\nexport default new ServiceHandle();\r\n\r\n// import {create} from 'apisauce';\r\n// import {Const} from '.';\r\n\r\n// const api = create({\r\n//   timeout: 20000,\r\n//   baseURL: Const.API.BaseURL,\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n//   withCredentials: false,\r\n// });\r\n\r\n// const returnData = (response) => {\r\n//   if (response.status) {\r\n//     if (response.status === 200) {\r\n//       return {\r\n//         data: response.data,\r\n//         headers: response.headers,\r\n//         ok: true,\r\n//       };\r\n//     } else if (response.status === 401) {\r\n//       return {\r\n//         ok: false,\r\n//         error: 'phiên đăng nhập hết hạn',\r\n//       };\r\n//     } else {\r\n//       return {\r\n//         ok: false,\r\n//         error: response.data.errors,\r\n//       };\r\n//     }\r\n//   } else {\r\n//     return {\r\n//       ok: false,\r\n//       error: 'network error',\r\n//     };\r\n//   }\r\n// };\r\n\r\n// const setHeader = (apiKey) => {\r\n//   api.setHeader('api_key', apiKey);\r\n// };\r\n\r\n// const get = async (url, params) => {\r\n//   const response = await api.get(url, params);\r\n//   return returnData(response);\r\n// };\r\n// const post = async (url, params) => {\r\n//   const response = await api.post(url, params);\r\n//   return returnData(response);\r\n// };\r\n// const put = async (url, params) => {\r\n//   const response = await api.put(url, params);\r\n//   return returnData(response);\r\n// };\r\n// const patch = async (url, params) => {\r\n//   const response = await api.patch(url, params);\r\n//   return returnData(response);\r\n// };\r\n// const deleteApi = async (url, params) => {\r\n//   const response = await api.delete(url, params);\r\n//   return returnData(response);\r\n// };\r\n\r\n// export {setHeader, get, post, put, patch, deleteApi};\r\n"]},"metadata":{},"sourceType":"module"}