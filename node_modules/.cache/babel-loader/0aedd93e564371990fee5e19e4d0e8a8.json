{"ast":null,"code":"import _asyncToGenerator from \"D:/eway/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"D:/eway/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/eway/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\eway\\\\src\\\\components\\\\facility\\\\PostalAddressEdit.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"D:\\\\eway\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from \"react-i18next\";\nimport PropTypes from 'prop-types';\nimport { Toast } from 'primereact/toast';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\nimport { FacilityService } from '../../service/FacilityService';\nimport { ContactMechService } from '../../service/ContactMechService';\nimport { GeoService } from '../../service/GeoService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var PostalAddressEdit = function PostalAddressEdit(props) {\n  _s();\n\n  var emptyPostalAddress = {\n    \"partyId\": \"\",\n    \"facilityId\": \"\",\n    \"contactMechPurposeId\": \"\",\n    \"contactMechId\": \"\",\n    \"toName\": \"\",\n    \"unitNumber\": \"\",\n    \"address1\": \"\",\n    \"city\": \"\",\n    \"stateProvinceGeoId\": \"\",\n    \"countryGeoId\": \"VNM\",\n    \"postalCode\": \"\" // \"comments\": \"comments\",\n    // \"description\": \"description\",\n    // \"information\": \"information\"\n\n  };\n  var toast = useRef(null);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; //\n\n\n  var _useState = useState(emptyPostalAddress),\n      _useState2 = _slicedToArray(_useState, 2),\n      postalAddress = _useState2[0],\n      setPostalAddress = _useState2[1];\n\n  var _useState3 = useState([{}]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      countries = _useState4[0],\n      setCountries = _useState4[1];\n\n  var _useState5 = useState([{}]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      provinces = _useState6[0],\n      setProvinces = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      contactMechPurposes = _useState8[0],\n      setContactMechPurposes = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      saveLoading = _useState10[0],\n      setSaveLoading = _useState10[1];\n\n  useEffect(function () {\n    var _postalAddress = _objectSpread(_objectSpread({}, emptyPostalAddress), props.postalAddress);\n\n    setPostalAddress(_postalAddress); // \n\n    var contactMechService = new ContactMechService();\n    var geoService = new GeoService();\n\n    var getAllContactMechPurposes = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contactMechService.getPurposeByPostalAddresses().then(function (data) {\n                  return setContactMechPurposes(data.contactMechPurposeList);\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getAllContactMechPurposes() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var getCountries = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                geoService.getCountries().then(function (data) {\n                  return setCountries(data.geoList);\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function getCountries() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getAllContactMechPurposes();\n    getCountries();\n    getProvinces();\n    return function () {\n      setPostalAddress({});\n      setContactMechPurposes([{}]);\n      setCountries([{}]);\n      setProvinces([{}]);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // useEffect(() => {\n  //    console.log(\"country changed\");\n  // },[postalAddress]);\n\n  var getProvinces = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var geoService, _geoId;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              geoService = new GeoService();\n              _geoId = postalAddress.countryGeoId;\n              geoService.getGeoRegionList(_geoId).then(function (data) {\n                return setProvinces(data);\n              });\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getProvinces() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var savePostalAddress = function savePostalAddress() {\n    var contactMechService = new ContactMechService();\n    var facilityService = new FacilityService();\n    setSaveLoading(true);\n\n    if (postalAddress.contactMechId) {\n      // update case\n      facilityService.updatePostalAddress(postalAddress.facilityId, postalAddress.contactMechId, postalAddress).then(function (data) {\n        toast.current.show({\n          severity: 'success',\n          summary: 'Successful',\n          detail: t('common:facility.postalAddress.updated'),\n          life: 5000\n        });\n        props.onSave(postalAddress); // callback\n\n        setSaveLoading(false);\n      });\n    } else {\n      // create new\n      contactMechService.createPostalAddress(postalAddress).then(function (data) {\n        toast.current.show({\n          severity: 'success',\n          summary: 'Successful',\n          detail: t('common:facility.postalAddress.created'),\n          life: 5000\n        });\n        props.onSave(postalAddress); // callback\n\n        setSaveLoading(false);\n      });\n    }\n  };\n\n  var cancelPostalAddress = function cancelPostalAddress() {\n    props.onCancel(postalAddress); // callback\n  };\n\n  var onInputChange = function onInputChange(e, name) {\n    var val = e.target && e.target.value || '';\n\n    var _postalAddress = _objectSpread({}, postalAddress);\n\n    _postalAddress[\"\".concat(name)] = val;\n    setPostalAddress(_postalAddress);\n  };\n\n  var onProvinceShow = function onProvinceShow(e) {\n    getProvinces();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(Toast, {\n        ref: toast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-fluid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"contactMechPurposeId\",\n            children: t('common:facility.postalAddress.contactMechPurposeId')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Dropdown, {\n            id: \"contactMechPurposeId\",\n            value: postalAddress.contactMechPurposeId,\n            options: contactMechPurposes,\n            optionValue: \"contactMechPurposeId\",\n            optionLabel: \"description\",\n            onChange: function onChange(e) {\n              return onInputChange(e, 'contactMechPurposeId');\n            },\n            showClear: true,\n            filter: true,\n            filterBy: \"description\",\n            disabled: !!postalAddress.contactMechId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"address1\",\n            children: t('common:facility.postalAddress.address1')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(InputText, {\n            id: \"address1\",\n            value: postalAddress.address1,\n            onChange: function onChange(e) {\n              return onInputChange(e, 'address1');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"city\",\n            children: t('common:facility.postalAddress.city')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(InputText, {\n            id: \"city\",\n            value: postalAddress.city,\n            onChange: function onChange(e) {\n              return onInputChange(e, 'city');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"countryGeoId\",\n            children: t('common:facility.postalAddress.countryGeoId')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Dropdown, {\n            id: \"countryGeoId\",\n            value: postalAddress.countryGeoId,\n            options: countries,\n            optionValue: \"geoId\",\n            optionLabel: \"geoName\",\n            onChange: function onChange(e) {\n              return onInputChange(e, 'countryGeoId');\n            },\n            showClear: true,\n            filter: true,\n            filterBy: \"geoName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"stateProvinceGeoId\",\n            children: t('common:facility.postalAddress.stateProvinceGeoId')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Dropdown, {\n            id: \"stateProvinceGeoId\",\n            value: postalAddress.stateProvinceGeoId,\n            options: provinces,\n            optionValue: \"geoId\",\n            optionLabel: \"geoName\",\n            onChange: function onChange(e) {\n              return onInputChange(e, 'stateProvinceGeoId');\n            },\n            onShow: onProvinceShow,\n            showClear: true,\n            filter: true,\n            filterBy: \"geoName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"postalCode\",\n            children: t('common:facility.postalAddress.postalCode')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(InputText, {\n            id: \"postalCode\",\n            value: postalAddress.postalCode,\n            onChange: function onChange(e) {\n              return onInputChange(e, 'postalCode');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"toName\",\n            children: t('common:facility.postalAddress.toName')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(InputText, {\n            id: \"toName\",\n            value: postalAddress.toName,\n            onChange: function onChange(e) {\n              return onInputChange(e, 'toName');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"p-buttonset\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            label: t('common:facility.postalAddress.save'),\n            icon: \"pi pi-check\",\n            className: \"p-mr-2\",\n            loading: saveLoading,\n            onClick: savePostalAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            label: t('common:facility.postalAddress.cancel'),\n            icon: \"pi pi-times\",\n            className: \"p-button-text\",\n            onClick: cancelPostalAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(PostalAddressEdit, \"9KzcE5lVptdE4pO5rMaoIAAVKis=\", false, function () {\n  return [useTranslation];\n});\n\n_c = PostalAddressEdit;\nPostalAddressEdit.propTypes = {\n  facilityId: PropTypes.string,\n  partyId: PropTypes.string,\n  postalAddress: PropTypes.object,\n  onSave: PropTypes.func\n};\nPostalAddressEdit.defaultProps = {\n  onSave: function onSave() {}\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PostalAddressEdit\");","map":{"version":3,"sources":["D:/eway/src/components/facility/PostalAddressEdit.js"],"names":["React","useState","useEffect","useRef","useTranslation","PropTypes","Toast","Button","InputText","Dropdown","FacilityService","ContactMechService","GeoService","PostalAddressEdit","props","emptyPostalAddress","toast","t","postalAddress","setPostalAddress","countries","setCountries","provinces","setProvinces","contactMechPurposes","setContactMechPurposes","saveLoading","setSaveLoading","_postalAddress","contactMechService","geoService","getAllContactMechPurposes","getPurposeByPostalAddresses","then","data","contactMechPurposeList","getCountries","geoList","getProvinces","_geoId","countryGeoId","getGeoRegionList","savePostalAddress","facilityService","contactMechId","updatePostalAddress","facilityId","current","show","severity","summary","detail","life","onSave","createPostalAddress","cancelPostalAddress","onCancel","onInputChange","e","name","val","target","value","onProvinceShow","contactMechPurposeId","address1","city","stateProvinceGeoId","postalCode","toName","propTypes","string","partyId","object","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport PropTypes from 'prop-types'; \r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Dropdown } from 'primereact/dropdown';\r\n\r\nimport { FacilityService } from '../../service/FacilityService';\r\nimport { ContactMechService } from '../../service/ContactMechService';\r\nimport { GeoService } from '../../service/GeoService';\r\n\r\nexport const PostalAddressEdit = (props) => {\r\n\r\n    let emptyPostalAddress = {\r\n        \"partyId\": \"\",\r\n        \"facilityId\": \"\",\r\n        \"contactMechPurposeId\": \"\",\r\n        \"contactMechId\": \"\", \r\n        \"toName\": \"\",\r\n        \"unitNumber\": \"\",\r\n        \"address1\": \"\",\r\n        \"city\": \"\",\r\n        \"stateProvinceGeoId\": \"\",\r\n        \"countryGeoId\": \"VNM\",\r\n        \"postalCode\": \"\",\r\n        // \"comments\": \"comments\",\r\n        // \"description\": \"description\",\r\n        // \"information\": \"information\"\r\n\r\n    }\r\n\r\n    const toast = useRef(null);\r\n    const { t } = useTranslation();\r\n    //\r\n    const [postalAddress, setPostalAddress] = useState(emptyPostalAddress);\r\n    const [countries, setCountries] = useState([{}]);\r\n    const [provinces, setProvinces] = useState([{}]);\r\n    const [contactMechPurposes, setContactMechPurposes] = useState(null);\r\n    const [saveLoading, setSaveLoading] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        let _postalAddress = {...emptyPostalAddress, ...props.postalAddress};\r\n        setPostalAddress(_postalAddress);\r\n        // \r\n           \r\n        const contactMechService = new ContactMechService();\r\n        const geoService = new GeoService();\r\n        \r\n        const getAllContactMechPurposes = async() =>{\r\n            contactMechService.getPurposeByPostalAddresses().then(data => setContactMechPurposes(data.contactMechPurposeList));\r\n        }\r\n\r\n        const getCountries = async() =>{\r\n            geoService.getCountries().then(data => setCountries(data.geoList));\r\n        }\r\n                \r\n        getAllContactMechPurposes();\r\n        getCountries();\r\n        getProvinces();\r\n        return ()  => {\r\n            setPostalAddress({});\r\n            setContactMechPurposes([{}]);\r\n            setCountries([{}]);\r\n            setProvinces([{}]);\r\n        }    \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[]);\r\n\r\n    // useEffect(() => {\r\n    //    console.log(\"country changed\");\r\n    // },[postalAddress]);\r\n\r\n    const getProvinces = async() =>{\r\n        const geoService = new GeoService();\r\n        let _geoId = postalAddress.countryGeoId;\r\n        geoService.getGeoRegionList(_geoId).then(data => setProvinces(data));\r\n    }\r\n\r\n    const savePostalAddress = () => {\r\n        const contactMechService = new ContactMechService();\r\n        const facilityService = new FacilityService();\r\n        \r\n        setSaveLoading(true);\r\n        if(postalAddress.contactMechId){ // update case\r\n            facilityService.updatePostalAddress(postalAddress.facilityId, postalAddress.contactMechId, postalAddress).then(data => {\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: t('common:facility.postalAddress.updated'), life: 5000 });\r\n                props.onSave(postalAddress); // callback\r\n                setSaveLoading(false);\r\n            });\r\n        }else{ // create new\r\n                contactMechService.createPostalAddress(postalAddress).then(data => {\r\n                    toast.current.show({ severity: 'success', summary: 'Successful', detail: t('common:facility.postalAddress.created'), life: 5000 });\r\n                    props.onSave(postalAddress); // callback\r\n                    setSaveLoading(false);\r\n                });\r\n        }\r\n    }\r\n    const cancelPostalAddress = () => {\r\n        props.onCancel(postalAddress); // callback\r\n    }\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _postalAddress = {...postalAddress};\r\n        _postalAddress[`${name}`] = val;\r\n\r\n        setPostalAddress(_postalAddress);\r\n    }\r\n\r\n    const onProvinceShow = (e) =>{\r\n        getProvinces();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n           <div className=\"card\">\r\n                <Toast ref={toast} />\r\n                <div className=\"p-fluid\">\r\n                    {/* <div className=\"p-field\">\r\n                        <label htmlFor=\"facilityId\">ID</label>\r\n                        <InputText id=\"facilityId\" value={postalAddress?.facilityId} readOnly/>\r\n                    </div> */}\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"contactMechPurposeId\">{t('common:facility.postalAddress.contactMechPurposeId')}</label>\r\n                        <Dropdown id=\"contactMechPurposeId\" value={postalAddress.contactMechPurposeId} options={contactMechPurposes} optionValue=\"contactMechPurposeId\" optionLabel=\"description\" \r\n                                         onChange={(e) => onInputChange(e, 'contactMechPurposeId')} showClear filter filterBy=\"description\" disabled={!!postalAddress.contactMechId}/>\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"address1\">{t('common:facility.postalAddress.address1')}</label>\r\n                        <InputText id=\"address1\" value={postalAddress.address1} onChange={(e) => onInputChange(e, 'address1')} />\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"city\">{t('common:facility.postalAddress.city')}</label>\r\n                        <InputText id=\"city\" value={postalAddress.city} onChange={(e) => onInputChange(e, 'city')} />\r\n                    </div>\r\n           \r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"countryGeoId\">{t('common:facility.postalAddress.countryGeoId')}</label>\r\n                        <Dropdown id=\"countryGeoId\" value={postalAddress.countryGeoId} options={countries} optionValue=\"geoId\" optionLabel=\"geoName\"  onChange={(e) => onInputChange(e, 'countryGeoId')} showClear filter filterBy=\"geoName\"/>\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"stateProvinceGeoId\">{t('common:facility.postalAddress.stateProvinceGeoId')}</label>\r\n                        <Dropdown id=\"stateProvinceGeoId\" value={postalAddress.stateProvinceGeoId} options={provinces} optionValue=\"geoId\" optionLabel=\"geoName\"  onChange={(e) => onInputChange(e, 'stateProvinceGeoId')} onShow={onProvinceShow} showClear filter filterBy=\"geoName\"  />\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"postalCode\">{t('common:facility.postalAddress.postalCode')}</label>\r\n                        <InputText id=\"postalCode\" value={postalAddress.postalCode} onChange={(e) => onInputChange(e, 'postalCode')} />\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"toName\">{t('common:facility.postalAddress.toName')}</label>\r\n                        <InputText id=\"toName\" value={postalAddress.toName} onChange={(e) => onInputChange(e, 'toName')} />\r\n                    </div>\r\n                    <span className=\"p-buttonset\">\r\n                        <Button label={t('common:facility.postalAddress.save')} icon=\"pi pi-check\" className=\"p-mr-2\" loading={saveLoading} onClick={savePostalAddress} />\r\n                        <Button label={t('common:facility.postalAddress.cancel')} icon=\"pi pi-times\" className=\"p-button-text\" onClick={cancelPostalAddress} /> \r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n\r\n}\r\n\r\nPostalAddressEdit.propTypes  = {\r\n    facilityId: PropTypes.string,\r\n    partyId: PropTypes.string,\r\n    postalAddress: PropTypes.object,\r\n    onSave: PropTypes.func\r\n};\r\n\r\nPostalAddressEdit.defaultProps  = {\r\n    onSave: function(){}\r\n};"]},"metadata":{},"sourceType":"module"}