{"ast":null,"code":"import _asyncToGenerator from \"D:/eway/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"D:/eway/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\eway\\\\src\\\\components\\\\facility\\\\FacilityPostalAddressList.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"D:\\\\eway\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from \"react-i18next\";\nimport PropTypes from 'prop-types';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { Toast } from 'primereact/toast';\nimport { Button } from 'primereact/button';\nimport { Toolbar } from 'primereact/toolbar';\nimport { Dialog } from 'primereact/dialog';\nimport { ConfirmDialog } from 'primereact/confirmdialog';\nimport { FacilityService } from '../../service/FacilityService';\nimport { ContactMechService } from '../../service/ContactMechService';\nimport { GeoService } from '../../service/GeoService';\nimport { PostalAddressEdit } from './PostalAddressEdit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var FacilityPostalAddressList = function FacilityPostalAddressList(props) {\n  _s();\n\n  var facilityId = props.facilityId;\n  var emptyPostalAddress = {\n    \"facilityId\": facilityId,\n    \"contactMechId\": \"\",\n    \"contactMechPurposeId\": \"\",\n    \"toName\": \"\",\n    \"unitNumber\": \"\",\n    \"address1\": \"\",\n    \"city\": \"\",\n    \"cityGeoId\": \"\",\n    \"stateProvinceGeoId\": \"\",\n    \"countryGeoId\": \"\",\n    \"postalCode\": \"\",\n    \"postalCodeExt\": \"\",\n    \"description\": \"\",\n    \"fromDate\": \"\",\n    \"thruDate\": \"\",\n    \"lastUpdatedStamp\": null\n  };\n  var toast = useRef(null); // const dt = useRef(null);\n  // const cm = useRef(null);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; //\n\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      postalAddresses = _useState2[0],\n      setPostalAddresses = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedPostalAddress = _useState4[0],\n      setSelectedPostalAddress = _useState4[1];\n\n  var _useState5 = useState([{}]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      countries = _useState6[0],\n      setCountries = _useState6[1];\n\n  var _useState7 = useState([{}]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      provinces = _useState8[0],\n      setProvinces = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      contactMechPurposes = _useState10[0],\n      setContactMechPurposes = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      editDialog = _useState12[0],\n      setEditDialog = _useState12[1]; //\n\n\n  var facilityService = new FacilityService();\n  useEffect(function () {\n    var contactMechService = new ContactMechService();\n    var geoService = new GeoService();\n\n    var getAllContactMechPurposes = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contactMechService.getPurposeByPostalAddresses().then(function (data) {\n                  return setContactMechPurposes(data.contactMechPurposeList);\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getAllContactMechPurposes() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var getAllCountryAndProvince = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                geoService.getGeos({\n                  \"pageNoLimit\": \"true\"\n                }).then(function (data) {\n                  var _countryList = data.geoList.filter(function (item) {\n                    return item.geoTypeEnumId === 'GEOT_COUNTRY';\n                  });\n\n                  var _provinceList = data.geoList.filter(function (item) {\n                    return item.geoTypeEnumId === 'GEOT_PROVINCE';\n                  }); // all provinces\n\n\n                  setCountries(_countryList);\n                  setProvinces(_provinceList);\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function getAllCountryAndProvince() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getAllContactMechPurposes();\n    getAllCountryAndProvince();\n    getAllPostalAddress();\n    return function () {\n      setPostalAddresses([{}]);\n      setContactMechPurposes([{}]);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  var getAllPostalAddress = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              facilityService.getPostalAddresses(facilityId, {\n                \"pageNoLimit\": true\n              }).then(function (data) {\n                var _postalAddressList = data.postalAddressList.filter(function (item) {\n                  return !item.thruDate;\n                });\n\n                setPostalAddresses(_postalAddressList);\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getAllPostalAddress() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var openNew = function openNew() {\n    setSelectedPostalAddress(emptyPostalAddress);\n    setEditDialog(true);\n  };\n\n  var openEdit = function openEdit(postalAddress) {\n    setSelectedPostalAddress(postalAddress);\n    setEditDialog(true);\n  };\n\n  var onSavePostalAddress = function onSavePostalAddress(postalAddressSaved) {\n    setEditDialog(false);\n\n    if (postalAddressSaved.replacesContactMechId) {\n      // updated\n      toast.current.show({\n        severity: 'success',\n        summary: 'Successful',\n        detail: t('common:facility.postalAddress.updated'),\n        life: 5000\n      });\n    } else {\n      toast.current.show({\n        severity: 'success',\n        summary: 'Successful',\n        detail: t('common:facility.postalAddress.created'),\n        life: 5000\n      });\n    } // reload table\n\n\n    getAllPostalAddress();\n  };\n\n  var confirmDelete = function confirmDelete(postalAddress) {\n    ConfirmDialog({\n      message: 'Do you want to delete this record?',\n      header: 'Delete Confirmation',\n      icon: 'pi pi-info-circle',\n      acceptClassName: 'p-button-danger',\n      accept: function accept() {\n        return acceptDelete(postalAddress);\n      }\n    });\n  };\n\n  var acceptDelete = function acceptDelete(postalAddress) {\n    facilityService.deleteContactMech(postalAddress === null || postalAddress === void 0 ? void 0 : postalAddress.facilityId, postalAddress === null || postalAddress === void 0 ? void 0 : postalAddress.contactMechId, postalAddress === null || postalAddress === void 0 ? void 0 : postalAddress.contactMechPurposeId).then(function (data) {\n      toast.current.show({\n        severity: 'info',\n        summary: 'Confirmed',\n        detail: t('common:facility.postalAddress.deleted'),\n        life: 3000\n      });\n      getAllPostalAddress(); // reload table\n    });\n  };\n\n  var rightToolbarTemplate = function rightToolbarTemplate() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        label: t('common:facility.postalAddress.new'),\n        icon: \"pi pi-plus\",\n        className: \"p-button-success p-mr-2\",\n        onClick: openNew\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, _this);\n  };\n\n  var dateBodyTemplate = function dateBodyTemplate(rowData) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: new Date(rowData.fromDate).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, _this);\n  }; // const countryBodyTemplate = (rowData) => {\n  //     return (\n  //         <React.Fragment>\n  //                 <span>\n  //                     {countries?.find(item => item.geoId === rowData.countryGeoId)?.geoName}\n  //                 </span>\n  //         </React.Fragment>\n  //     )\n  // }\n  // const provinceBodyTemplate = (rowData) => {\n  //     return (\n  //         <React.Fragment>\n  //                 <span>\n  //                     {provinces?.find(item => item.geoId === rowData.stateProvinceGeoId)?.geoName}\n  //                 </span>\n  //         </React.Fragment>\n  //     )\n  // }\n\n\n  var purposeBodyTemplate = function purposeBodyTemplate(rowData) {\n    var _contactMechPurposes$;\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: contactMechPurposes === null || contactMechPurposes === void 0 ? void 0 : (_contactMechPurposes$ = contactMechPurposes.find(function (item) {\n          return item.contactMechPurposeId === rowData.contactMechPurposeId;\n        })) === null || _contactMechPurposes$ === void 0 ? void 0 : _contactMechPurposes$.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, _this);\n  };\n\n  var fullAddressBodyTemplate = function fullAddressBodyTemplate(rowData) {\n    var _provinces$find, _countries$find;\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [rowData.address1, \" \", rowData.city]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\", \", provinces === null || provinces === void 0 ? void 0 : (_provinces$find = provinces.find(function (item) {\n          return item.geoId === rowData.stateProvinceGeoId;\n        })) === null || _provinces$find === void 0 ? void 0 : _provinces$find.geoName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\", \", countries === null || countries === void 0 ? void 0 : (_countries$find = countries.find(function (item) {\n          return item.geoId === rowData.countryGeoId;\n        })) === null || _countries$find === void 0 ? void 0 : _countries$find.geoName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, _this);\n  };\n\n  var actionBodyTemplate = function actionBodyTemplate(rowData) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        icon: \"pi pi-pencil\",\n        className: \"p-button-rounded p-button-success p-mr-2\",\n        onClick: function onClick() {\n          return openEdit(rowData);\n        },\n        disabled: rowData.thruDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        icon: \"pi pi-trash\",\n        className: \"p-button-rounded p-button-warning\",\n        onClick: function onClick() {\n          return confirmDelete(rowData);\n        },\n        disabled: rowData.thruDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      ref: toast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n        className: \"p-mb-4\",\n        right: rightToolbarTemplate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(DataTable, {\n        value: postalAddresses,\n        selectionMode: \"single\",\n        selection: selectedPostalAddress,\n        onSelectionChange: function onSelectionChange(e) {\n          return setSelectedPostalAddress(e.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Column, {\n          field: \"contactMechPurposeId\",\n          header: t('common:facility.postalAddress.contactMechPurposeId'),\n          body: purposeBodyTemplate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Column, {\n          header: t('common:facility.postalAddress.address'),\n          body: fullAddressBodyTemplate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Column, {\n          field: \"toName\",\n          header: t('common:facility.postalAddress.toName')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Column, {\n          field: \"fromDate\",\n          header: t('common:facility.postalAddress.fromDate'),\n          body: dateBodyTemplate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Column, {\n          body: actionBodyTemplate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Dialog, {\n      visible: editDialog,\n      style: {\n        width: '450px'\n      },\n      header: t('common:facility.postalAddress.detail'),\n      modal: true,\n      closable: false,\n      children: /*#__PURE__*/_jsxDEV(PostalAddressEdit, {\n        postalAddress: selectedPostalAddress,\n        onCancel: function onCancel() {\n          return setEditDialog(false);\n        },\n        onSave: onSavePostalAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(FacilityPostalAddressList, \"H1zeGyI6OsgR1w9WDSDeF/De7TA=\", false, function () {\n  return [useTranslation];\n});\n\n_c = FacilityPostalAddressList;\nFacilityPostalAddressList.propTypes = {\n  facilityId: PropTypes.string.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"FacilityPostalAddressList\");","map":{"version":3,"sources":["D:/eway/src/components/facility/FacilityPostalAddressList.js"],"names":["React","useState","useEffect","useRef","useTranslation","PropTypes","DataTable","Column","Toast","Button","Toolbar","Dialog","ConfirmDialog","FacilityService","ContactMechService","GeoService","PostalAddressEdit","FacilityPostalAddressList","props","facilityId","emptyPostalAddress","toast","t","postalAddresses","setPostalAddresses","selectedPostalAddress","setSelectedPostalAddress","countries","setCountries","provinces","setProvinces","contactMechPurposes","setContactMechPurposes","editDialog","setEditDialog","facilityService","contactMechService","geoService","getAllContactMechPurposes","getPurposeByPostalAddresses","then","data","contactMechPurposeList","getAllCountryAndProvince","getGeos","_countryList","geoList","filter","item","geoTypeEnumId","_provinceList","getAllPostalAddress","getPostalAddresses","_postalAddressList","postalAddressList","thruDate","openNew","openEdit","postalAddress","onSavePostalAddress","postalAddressSaved","replacesContactMechId","current","show","severity","summary","detail","life","confirmDelete","message","header","icon","acceptClassName","accept","acceptDelete","deleteContactMech","contactMechId","contactMechPurposeId","rightToolbarTemplate","dateBodyTemplate","rowData","Date","fromDate","toLocaleString","purposeBodyTemplate","find","description","fullAddressBodyTemplate","address1","city","geoId","stateProvinceGeoId","geoName","countryGeoId","actionBodyTemplate","e","value","width","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport PropTypes from 'prop-types';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { ConfirmDialog } from 'primereact/confirmdialog';\r\n\r\nimport { FacilityService } from '../../service/FacilityService';\r\nimport { ContactMechService } from '../../service/ContactMechService';\r\nimport { GeoService } from '../../service/GeoService';\r\n\r\nimport { PostalAddressEdit } from './PostalAddressEdit';\r\n\r\nexport const FacilityPostalAddressList = (props) => {\r\n\r\n    const {facilityId}=props\r\n\r\n    let emptyPostalAddress = {\r\n        \"facilityId\": facilityId,\r\n        \"contactMechId\": \"\",\r\n        \"contactMechPurposeId\": \"\",\r\n        \"toName\": \"\",\r\n        \"unitNumber\": \"\",\r\n        \"address1\": \"\",\r\n        \"city\": \"\",\r\n        \"cityGeoId\": \"\",\r\n        \"stateProvinceGeoId\": \"\",\r\n        \"countryGeoId\": \"\",\r\n        \"postalCode\": \"\",\r\n        \"postalCodeExt\": \"\",\r\n        \"description\": \"\",\r\n        \"fromDate\": \"\",\r\n        \"thruDate\": \"\",\r\n        \"lastUpdatedStamp\": null\r\n    }\r\n\r\n    const toast = useRef(null);\r\n    // const dt = useRef(null);\r\n    // const cm = useRef(null);\r\n    const { t } = useTranslation();\r\n\r\n    //\r\n    const [postalAddresses, setPostalAddresses] = useState(null);\r\n    const [selectedPostalAddress, setSelectedPostalAddress] = useState(null);\r\n\r\n    const [countries, setCountries] = useState([{}]);\r\n    const [provinces, setProvinces] = useState([{}]);\r\n    const [contactMechPurposes, setContactMechPurposes] = useState(null);\r\n\r\n    const [editDialog, setEditDialog] = useState(false);\r\n\r\n    //\r\n    const facilityService = new FacilityService();\r\n    \r\n\r\n    useEffect(() => {\r\n        const contactMechService = new ContactMechService();\r\n        const geoService = new GeoService();\r\n\r\n        const getAllContactMechPurposes = async() =>{\r\n            contactMechService.getPurposeByPostalAddresses().then(data => setContactMechPurposes(data.contactMechPurposeList));\r\n        }\r\n\r\n        const getAllCountryAndProvince = async() => {\r\n            geoService.getGeos({\"pageNoLimit\": \"true\"}).then(data => {\r\n                let _countryList =  data.geoList.filter(item => (item.geoTypeEnumId === 'GEOT_COUNTRY'));\r\n                let _provinceList =  data.geoList.filter(item => (item.geoTypeEnumId === 'GEOT_PROVINCE')); // all provinces\r\n                setCountries(_countryList);\r\n                setProvinces(_provinceList);\r\n            });\r\n        }\r\n\r\n        getAllContactMechPurposes();\r\n        getAllCountryAndProvince();\r\n        getAllPostalAddress();\r\n\r\n        return ()  => {\r\n            setPostalAddresses([{}]);\r\n            setContactMechPurposes([{}]);\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[]);\r\n\r\n    const getAllPostalAddress = async() =>{\r\n        facilityService.getPostalAddresses(facilityId, {\"pageNoLimit\": true}).then(data => {\r\n            let _postalAddressList =  data.postalAddressList.filter(item => !item.thruDate);\r\n            setPostalAddresses(_postalAddressList);\r\n        });\r\n    }\r\n\r\n    const openNew = () => {\r\n        setSelectedPostalAddress(emptyPostalAddress);\r\n        setEditDialog(true);\r\n    }\r\n\r\n    const openEdit = (postalAddress) => {\r\n        setSelectedPostalAddress(postalAddress);\r\n        setEditDialog(true);\r\n    }\r\n\r\n    const onSavePostalAddress = (postalAddressSaved) => {\r\n        setEditDialog(false);\r\n        if(postalAddressSaved.replacesContactMechId){ // updated\r\n            toast.current.show({ severity: 'success', summary: 'Successful', detail: t('common:facility.postalAddress.updated'), life: 5000 });\r\n        }else{\r\n            toast.current.show({ severity: 'success', summary: 'Successful', detail: t('common:facility.postalAddress.created'), life: 5000 });\r\n        }\r\n        // reload table\r\n        getAllPostalAddress();\r\n\r\n    }\r\n\r\n    const confirmDelete = (postalAddress) => {\r\n        ConfirmDialog({\r\n            message: 'Do you want to delete this record?',\r\n            header: 'Delete Confirmation',\r\n            icon: 'pi pi-info-circle',\r\n            acceptClassName: 'p-button-danger',\r\n            accept: () => acceptDelete(postalAddress)\r\n        });\r\n    };\r\n\r\n    const acceptDelete = (postalAddress) => {\r\n       facilityService.deleteContactMech(postalAddress?.facilityId\r\n            , postalAddress?.contactMechId\r\n            , postalAddress?.contactMechPurposeId).then(data =>{\r\n                toast.current.show({ severity: 'info', summary: 'Confirmed', detail: t('common:facility.postalAddress.deleted'), life: 3000 });\r\n                getAllPostalAddress();  // reload table\r\n            });\r\n    }\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button label={t('common:facility.postalAddress.new')} icon=\"pi pi-plus\" className=\"p-button-success p-mr-2\" onClick={openNew}/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const dateBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{new Date(rowData.fromDate).toLocaleString()}</span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    // const countryBodyTemplate = (rowData) => {\r\n    //     return (\r\n    //         <React.Fragment>\r\n    //                 <span>\r\n    //                     {countries?.find(item => item.geoId === rowData.countryGeoId)?.geoName}\r\n    //                 </span>\r\n    //         </React.Fragment>\r\n    //     )\r\n    // }\r\n\r\n    // const provinceBodyTemplate = (rowData) => {\r\n    //     return (\r\n    //         <React.Fragment>\r\n    //                 <span>\r\n    //                     {provinces?.find(item => item.geoId === rowData.stateProvinceGeoId)?.geoName}\r\n    //                 </span>\r\n    //         </React.Fragment>\r\n    //     )\r\n    // }\r\n\r\n    const purposeBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                    <span>\r\n                        {contactMechPurposes?.find(item => item.contactMechPurposeId === rowData.contactMechPurposeId)?.description}\r\n                    </span>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const fullAddressBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span>{rowData.address1} {rowData.city}</span>\r\n                <span>\r\n                    , {provinces?.find(item => item.geoId === rowData.stateProvinceGeoId)?.geoName}\r\n                </span>\r\n                <span>\r\n                    , {countries?.find(item => item.geoId === rowData.countryGeoId)?.geoName}\r\n                </span>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success p-mr-2\" onClick={() => openEdit(rowData)} disabled={rowData.thruDate} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDelete(rowData)} disabled={rowData.thruDate}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <div className=\"card\">\r\n                <Toolbar className=\"p-mb-4\" right={rightToolbarTemplate}></Toolbar>\r\n                <DataTable value={postalAddresses}  selectionMode=\"single\" selection={selectedPostalAddress} onSelectionChange={e => setSelectedPostalAddress(e.value)}>\r\n                    {/* <Column field=\"contactMechId\" header=\"contactMechId\" ></Column> */}\r\n                    <Column field=\"contactMechPurposeId\" header={t('common:facility.postalAddress.contactMechPurposeId')} body={purposeBodyTemplate}></Column>\r\n                    {/* <Column field=\"address1\" header=\"address1\" ></Column> */}\r\n                    {/* <Column field=\"city\" header=\"city\" ></Column> */}\r\n                    {/* <Column field=\"stateProvinceGeoId\" header=\"stateProvinceGeoId\" body={provinceBodyTemplate}></Column> */}\r\n                    {/* <Column field=\"countryGeoId\" header=\"countryGeoId\" body={countryBodyTemplate}></Column> */}\r\n                    <Column header={t('common:facility.postalAddress.address')} body={fullAddressBodyTemplate}></Column>\r\n                    <Column field=\"toName\" header={t('common:facility.postalAddress.toName')} ></Column>\r\n                    <Column field=\"fromDate\" header={t('common:facility.postalAddress.fromDate')} body={dateBodyTemplate} ></Column>\r\n                    <Column body={actionBodyTemplate} ></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <Dialog visible={editDialog} style={{ width: '450px' }} header={t('common:facility.postalAddress.detail')} modal closable={false}>\r\n                <PostalAddressEdit postalAddress={selectedPostalAddress} onCancel={() => setEditDialog(false)} onSave={onSavePostalAddress}/>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nFacilityPostalAddressList.propTypes  = {\r\n    facilityId: PropTypes.string.isRequired\r\n};\r\n"]},"metadata":{},"sourceType":"module"}