{"ast":null,"code":"import _objectSpread from \"D:/eway/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/eway/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\eway\\\\src\\\\components\\\\POSSearchCustomerForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { AutoComplete } from 'primereact/autocomplete';\nimport { CommonService } from '../service/CommonService';\nimport { ToastContext } from '../App';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var POSSearchCustomerForm = function POSSearchCustomerForm(props) {\n  _s();\n\n  var _useTranslation = useTranslation('common'),\n      t = _useTranslation.t;\n\n  var toast = useContext(ToastContext);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      foundCustomers = _useState2[0],\n      setFoundCustomers = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedAutoValue = _useState4[0],\n      setSelectedAutoValue = _useState4[1];\n\n  var searchCustomers = function searchCustomers(event) {\n    setTimeout(function () {\n      var commonService = new CommonService();\n      commonService.quickSearch('MantleParty', \"*\".concat(event.query, \"*\")).then(function (data) {\n        setFoundCustomers(data.documentList);\n\n        if (data.documentList.length === 1) {\n          props.setCustomerInfo(data.documentList[0]);\n          props.updateOrderCustomerPartyId(data.documentList[0].partyId);\n          setSelectedAutoValue(null);\n          setFoundCustomers([]);\n        }\n      }).catch(function (err) {\n        toast.current.show({\n          severity: 'error',\n          summary: 'Error Message',\n          detail: err.response.data.errors,\n          life: 5000\n        });\n      });\n    }, 400);\n  };\n\n  var setCustomerInfo = function setCustomerInfo(event) {\n    props.setCustomerInfo(event.value);\n    props.updateOrderCustomerPartyId(event.value.partyId);\n    setSelectedAutoValue(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-inputgroup\",\n    children: /*#__PURE__*/_jsxDEV(AutoComplete, _objectSpread(_objectSpread({}, props), {}, {\n      placeholder: \"\".concat(t('common:pos.searchCustomer'), \" (F2)\"),\n      id: \"partyId\",\n      dropdown: true,\n      value: selectedAutoValue,\n      onChange: function onChange(e) {\n        return setSelectedAutoValue(e.value);\n      },\n      suggestions: foundCustomers,\n      completeMethod: searchCustomers,\n      field: \"partyId\",\n      onSelect: setCustomerInfo\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(POSSearchCustomerForm, \"FLQncwnpC+CHedkKPBZ1qH4LP5c=\", false, function () {\n  return [useTranslation];\n});\n\n_c = POSSearchCustomerForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"POSSearchCustomerForm\");","map":{"version":3,"sources":["D:/eway/src/components/POSSearchCustomerForm.js"],"names":["React","useState","useContext","AutoComplete","CommonService","ToastContext","useTranslation","POSSearchCustomerForm","props","t","toast","foundCustomers","setFoundCustomers","selectedAutoValue","setSelectedAutoValue","searchCustomers","event","setTimeout","commonService","quickSearch","query","then","data","documentList","length","setCustomerInfo","updateOrderCustomerPartyId","partyId","catch","err","current","show","severity","summary","detail","response","errors","life","value","e"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\nimport { CommonService } from '../service/CommonService';\r\nimport { ToastContext } from '../App';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const POSSearchCustomerForm = (props) => {\r\n  const { t } = useTranslation('common');\r\n\r\n  const toast = useContext(ToastContext);\r\n\r\n  const [foundCustomers, setFoundCustomers] = useState([]);\r\n  const [selectedAutoValue, setSelectedAutoValue] = useState(null);\r\n\r\n  const searchCustomers = (event) => {\r\n    setTimeout(() => {\r\n      const commonService = new CommonService();\r\n      commonService\r\n        .quickSearch('MantleParty', `*${event.query}*`)\r\n        .then((data) => {\r\n          setFoundCustomers(data.documentList);\r\n          if (data.documentList.length === 1) {\r\n            props.setCustomerInfo(data.documentList[0]);\r\n            props.updateOrderCustomerPartyId(data.documentList[0].partyId);\r\n            setSelectedAutoValue(null);\r\n            setFoundCustomers([]);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          toast.current.show({\r\n            severity: 'error',\r\n            summary: 'Error Message',\r\n            detail: err.response.data.errors,\r\n            life: 5000,\r\n          });\r\n        });\r\n    }, 400);\r\n  };\r\n\r\n  const setCustomerInfo = (event) => {\r\n      props.setCustomerInfo(event.value);\r\n      props.updateOrderCustomerPartyId(event.value.partyId);\r\n      setSelectedAutoValue(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-inputgroup\">\r\n      <AutoComplete\r\n        {...props}\r\n        placeholder={`${t('common:pos.searchCustomer')} (F2)`}\r\n        id=\"partyId\"\r\n        dropdown\r\n        value={selectedAutoValue}\r\n        onChange={(e) => setSelectedAutoValue(e.value)}\r\n        suggestions={foundCustomers}\r\n        completeMethod={searchCustomers}\r\n        field=\"partyId\"\r\n        onSelect={setCustomerInfo}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}