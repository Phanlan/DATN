{"ast":null,"code":"import _asyncToGenerator from \"D:/eway/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"D:/eway/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\eway\\\\src\\\\pages\\\\PersonalCustomer\\\\Edit\\\\GeneralInformation.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"D:\\\\eway\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useCallback, useContext, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { InputTextController } from '../../../components/PromotionComponent/InputTextController';\nimport { DropdownController } from '../../../components/PromotionComponent/DropdownController';\nimport { CommonService } from '../../../service/CommonService';\nimport { CustomerService } from '../../../service/CustomerService';\nimport { UserProfileContext } from '../../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var GeneralInformation = function GeneralInformation(props) {\n  _s();\n\n  var control = props.control,\n      errors = props.errors,\n      partyId = props.partyId,\n      setValue = props.setValue;\n\n  var _useTranslation = useTranslation('common'),\n      _useTranslation2 = _slicedToArray(_useTranslation, 1),\n      t = _useTranslation2[0];\n\n  var userProfile = useContext(UserProfileContext);\n  var commonService = new CommonService();\n  var customerService = new CustomerService();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      listProductStoreId = _useState2[0],\n      setListProductStoreId = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      center = _useState4[0],\n      setCenter = _useState4[1];\n\n  var emptyList = [];\n  useEffect(function () {\n    init(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    if (center !== null && center !== void 0 && center.lat && center !== null && center !== void 0 && center.lng) {\n      setValue('latitude', center === null || center === void 0 ? void 0 : center.lat);\n      setValue('longitude', center === null || center === void 0 ? void 0 : center.lng);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [center === null || center === void 0 ? void 0 : center.lat, center === null || center === void 0 ? void 0 : center.lng]);\n  var init = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var params, data, temp, productStore;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            params = {\n              enumTypeId: 'PartyType'\n            };\n            _context.next = 3;\n            return commonService.getEnumeration(params);\n\n          case 3:\n            data = _context.sent;\n            _context.next = 6;\n            return commonService.getProductStores(userProfile.info.partyId);\n\n          case 6:\n            data = _context.sent;\n            setListProductStoreId(data.productStoreList.map(function (elm) {\n              return {\n                name: elm.productStoreId,\n                code: elm.productStoreId\n              };\n            }));\n            params = {\n              partyId: partyId\n            };\n            _context.next = 11;\n            return customerService.getPersonalCustomerDetail(params);\n\n          case 11:\n            data = _context.sent;\n\n            if (data.person) {\n              temp = data.person;\n\n              if (temp.latitude && temp.longitude) {\n                setCenter({\n                  lat: temp.latitude,\n                  lng: temp.longitude\n                });\n              }\n\n              console.log(temp); // setValue('partyId', temp.partyId);\n              // setValue('fullName', temp.name);\n\n              setValue('description', temp.comments ? temp.comments : '');\n              productStore = {\n                name: temp.productStoreId,\n                code: temp.productStoreId\n              };\n              setValue('productStoreId', productStore);\n            } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n\n  var getFormErrorMessage = function getFormErrorMessage(name) {\n    var _errors$name;\n\n    return errors[name] && /*#__PURE__*/_jsxDEV(\"small\", {\n      className: \"p-error\",\n      children: (_errors$name = errors[name]) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 32\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-col-12\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card p-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-col-12 p-md-6\",\n            children: [/*#__PURE__*/_jsxDEV(InputTextController, {\n              id: \"partyId\",\n              label: t('customer.id'),\n              disabled: true,\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(InputTextController, {\n              id: \"fullName\",\n              label: t('customer.name'),\n              checkErr: true,\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(InputTextController, {\n              id: \"taxInformation\",\n              label: t('customer.taxInformation'),\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(DropdownController, {\n              id: \"productStoreId\",\n              label: t('productStore'),\n              checkErr: true,\n              options: listProductStoreId,\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(InputTextController, {\n              id: \"description\",\n              label: t('customer.description'),\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 29\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-col-12 p-md-6\",\n            children: [/*#__PURE__*/_jsxDEV(InputTextController, {\n              id: \"officeSiteName\",\n              label: t('customer.webAddress'),\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(DropdownController, {\n              id: \"salesmanId\",\n              label: t('customer.salesman'),\n              options: emptyList,\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(DropdownController, {\n              id: \"routeId\",\n              label: t('customer.route'),\n              options: emptyList,\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(DropdownController, {\n              id: \"unitId\",\n              label: t('customer.consigneeUnit'),\n              options: emptyList,\n              control: control,\n              getFormErrorMessage: getFormErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(GeneralInformation, \"5xnqvWw340kObTJkEBF0V2HCT58=\", false, function () {\n  return [useTranslation];\n});\n\n_c = GeneralInformation;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeneralInformation\");","map":{"version":3,"sources":["D:/eway/src/pages/PersonalCustomer/Edit/GeneralInformation.js"],"names":["React","useCallback","useContext","useState","useEffect","useTranslation","InputTextController","DropdownController","CommonService","CustomerService","UserProfileContext","GeneralInformation","props","control","errors","partyId","setValue","t","userProfile","commonService","customerService","listProductStoreId","setListProductStoreId","center","setCenter","emptyList","init","lat","lng","params","enumTypeId","getEnumeration","data","getProductStores","info","productStoreList","map","elm","name","productStoreId","code","getPersonalCustomerDetail","person","temp","latitude","longitude","console","log","comments","productStore","getFormErrorMessage","message"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { InputTextController } from '../../../components/PromotionComponent/InputTextController';\r\nimport { DropdownController } from '../../../components/PromotionComponent/DropdownController';\r\n\r\nimport { CommonService } from '../../../service/CommonService';\r\nimport { CustomerService } from '../../../service/CustomerService';\r\n\r\nimport { UserProfileContext } from '../../../App';\r\n\r\nexport const GeneralInformation = (props) => {\r\n    const { control, errors, partyId, setValue } = props;\r\n    const [t] = useTranslation('common');\r\n    const userProfile = useContext(UserProfileContext);\r\n\r\n    const commonService = new CommonService();\r\n    const customerService = new CustomerService();\r\n    \r\n\r\n    const [listProductStoreId, setListProductStoreId] = useState([]);\r\n\r\n    const [ center, setCenter ] = useState(null);\r\n\r\n\r\n    const emptyList = [];\r\n\r\n    useEffect(() => {\r\n        init();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (center?.lat && center?.lng) {\r\n            setValue('latitude', center?.lat)\r\n            setValue('longitude', center?.lng)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [center?.lat, center?.lng]);\r\n\r\n    const init = useCallback(async () => {\r\n        let params = {\r\n            enumTypeId: 'PartyType'\r\n        }\r\n        let data = await commonService.getEnumeration(params);\r\n\r\n        data = await commonService.getProductStores(userProfile.info.partyId);\r\n        setListProductStoreId(data.productStoreList.map((elm) => {\r\n            return {\r\n                name: elm.productStoreId,\r\n                code: elm.productStoreId\r\n            }\r\n        }));\r\n\r\n        params = {\r\n            partyId: partyId\r\n        }\r\n        data = await customerService.getPersonalCustomerDetail(params);\r\n        if (data.person) {\r\n            let temp = data.person;\r\n\r\n            if (temp.latitude && temp.longitude) {\r\n                setCenter({lat: temp.latitude, lng: temp.longitude});\r\n            }\r\n\r\n            console.log(temp);\r\n\r\n            // setValue('partyId', temp.partyId);\r\n            // setValue('fullName', temp.name);\r\n            setValue('description', temp.comments ? temp.comments : '');\r\n\r\n            let productStore = {\r\n                name: temp.productStoreId,\r\n                code: temp.productStoreId\r\n            }\r\n            setValue('productStoreId', productStore);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name]?.message}</small>\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-grid\">\r\n            <div className=\"p-col-12\">\r\n                <div className=\"card p-fluid\">\r\n                    <div className=\"p-grid\">\r\n                        <div className=\"p-col-12 p-md-6\">\r\n                            <InputTextController id='partyId' label={t('customer.id')} disabled\r\n                                control={control} getFormErrorMessage={getFormErrorMessage} />\r\n\r\n                            <InputTextController id='fullName' label={t('customer.name')} checkErr\r\n                                control={control} getFormErrorMessage={getFormErrorMessage} />\r\n                            \r\n                            <InputTextController id='taxInformation' label={t('customer.taxInformation')}\r\n                                control={control} getFormErrorMessage={getFormErrorMessage} />\r\n\r\n                            <DropdownController id='productStoreId' label={t('productStore')} checkErr\r\n                                options={listProductStoreId} control={control} getFormErrorMessage={getFormErrorMessage} />\r\n\r\n                            <InputTextController id='description' label={t('customer.description')}\r\n                                control={control} getFormErrorMessage={getFormErrorMessage} />\r\n                        </div>\r\n\r\n                        <div className=\"p-col-12 p-md-6\">\r\n                            <InputTextController id='officeSiteName' label={t('customer.webAddress')}\r\n                                control={control} getFormErrorMessage={getFormErrorMessage} />\r\n\r\n                            <DropdownController id='salesmanId' label={t('customer.salesman')}\r\n                                options={emptyList} control={control} getFormErrorMessage={getFormErrorMessage} />\r\n\r\n                            <DropdownController id='routeId' label={t('customer.route')}\r\n                                options={emptyList} control={control} getFormErrorMessage={getFormErrorMessage} />\r\n\r\n                            <DropdownController id='unitId' label={t('customer.consigneeUnit')}\r\n                                options={emptyList} control={control} getFormErrorMessage={getFormErrorMessage} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}