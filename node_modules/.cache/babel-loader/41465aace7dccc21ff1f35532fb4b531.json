{"ast":null,"code":"import _objectSpread from \"D:/eway/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"D:/eway/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/eway/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/eway/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport i18n from '../i18n';\nimport { Const, ServiceHandle } from '../utilities';\nexport var ContactMechService = /*#__PURE__*/function () {\n  function ContactMechService() {\n    _classCallCheck(this, ContactMechService);\n  }\n\n  _createClass(ContactMechService, [{\n    key: \"getContactMechPurpose\",\n    value: // jcontactMechPurpose\n\n    /**\r\n     * \r\n     * @param {*} contactMechPurposeId \r\n     * @returns Contact mech purpose detail\r\n     */\n    function getContactMechPurpose(contactMechPurposeId) {\n      return ServiceHandle.get(Const.API.ContactMechs + \"/purposes/{contactMechPurposeId}\").then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * \r\n     * @param {*} params\r\n     * @returns Page{contactMechPurposeList(contactMechPurposeId, description...), totalRecords}\r\n     */\n\n  }, {\n    key: \"getContactMechPurposes\",\n    value: function getContactMechPurposes(params) {\n      return ServiceHandle.get(Const.API.ContactMechs + \"/purposes\", {\n        params: params\n      }).then(function (res) {\n        var _data = _toConsumableArray(res.data);\n\n        _data.map(function (item) {\n          return item.description = i18n.t(\"contact_mech_purpose:\".concat(item.contactMechTypeEnumId, \".\").concat(item.contactMechPurposeId), item.description);\n        });\n\n        return {\n          contactMechPurposeList: res.data,\n          totalRecords: res.headers['x-total-count']\n        };\n      });\n    } // fetch contact mech purpose by contact type\n\n  }, {\n    key: \"getPurposeByPostalAddresses\",\n    value: function getPurposeByPostalAddresses(params) {\n      var _params = _objectSpread(_objectSpread({}, {\n        'contactMechTypeEnumId': 'CmtPostalAddress',\n        'pageNoLimit': true\n      }), params); // merge all\n\n\n      return this.getContactMechPurposes(_params);\n    }\n  }, {\n    key: \"getPurposeByTelecomNumbers\",\n    value: function getPurposeByTelecomNumbers(params) {\n      var _params = _objectSpread(_objectSpread({}, {\n        'contactMechTypeEnumId': 'CmtTelecomNumber',\n        'pageNoLimit': true\n      }), params); // merge all\n\n\n      return this.getContactMechPurposes(_params);\n    }\n  }, {\n    key: \"getPurposeByEmailAddresses\",\n    value: function getPurposeByEmailAddresses(params) {\n      var _params = _objectSpread(_objectSpread({}, {\n        'contactMechTypeEnumId': 'CmtEmailAddress',\n        'pageNoLimit': true\n      }), params); // merge all\n\n\n      return this.getContactMechPurposes(_params);\n    }\n  }, {\n    key: \"getPurposeByWebAddresses\",\n    value: function getPurposeByWebAddresses(params) {\n      var _params = _objectSpread(_objectSpread({}, {\n        'contactMechTypeEnumId': 'CmtWebAddress',\n        'pageNoLimit': true\n      }), params); // merge all\n\n\n      return this.getContactMechPurposes(_params);\n    }\n  }, {\n    key: \"getPurposeByIpAddress\",\n    value: function getPurposeByIpAddress(params) {\n      var _params = _objectSpread(_objectSpread({}, {\n        'contactMechTypeEnumId': 'CmtIpAddress',\n        'pageNoLimit': true\n      }), params); // merge all\n\n\n      return this.getContactMechPurposes(_params);\n    } // contactMechs\n\n    /**\r\n     * \r\n     * @param {*} params \r\n     * @returns contactMechId\r\n     */\n\n  }, {\n    key: \"createPostalAddress\",\n    value: function createPostalAddress(params) {\n      return ServiceHandle.post(Const.API.ContactMechs + \"/postalAddresses\", params).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * \r\n     * @param {*} params \r\n     * @returns contactMechId, trustLevelEnumId\r\n     */\n\n  }, {\n    key: \"createTelecomNumber\",\n    value: function createTelecomNumber(params) {\n      return ServiceHandle.post(Const.API.ContactMechs + \"/telecomNumbers\", params).then(function (res) {\n        return res.data;\n      });\n    }\n  }]);\n\n  return ContactMechService;\n}();","map":{"version":3,"sources":["D:/eway/src/service/ContactMechService.js"],"names":["i18n","Const","ServiceHandle","ContactMechService","contactMechPurposeId","get","API","ContactMechs","then","res","data","params","_data","map","item","description","t","contactMechTypeEnumId","contactMechPurposeList","totalRecords","headers","_params","getContactMechPurposes","post"],"mappings":"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","sourcesContent":["import i18n from '../i18n';\r\nimport { Const, ServiceHandle } from '../utilities';\r\n\r\nexport class ContactMechService {\r\n\r\n    // jcontactMechPurpose\r\n\r\n    /**\r\n     * \r\n     * @param {*} contactMechPurposeId \r\n     * @returns Contact mech purpose detail\r\n     */\r\n    getContactMechPurpose(contactMechPurposeId) {\r\n        return ServiceHandle.get(Const.API.ContactMechs + `/purposes/{contactMechPurposeId}`).then(res => {\r\n            return res.data\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} params\r\n     * @returns Page{contactMechPurposeList(contactMechPurposeId, description...), totalRecords}\r\n     */\r\n     getContactMechPurposes(params) {\r\n        return ServiceHandle.get(Const.API.ContactMechs + `/purposes`, { params: params }).then(res => {\r\n            let _data = [...res.data]\r\n            _data.map(item => {\r\n                return (item.description = i18n.t(`contact_mech_purpose:${item.contactMechTypeEnumId}.${item.contactMechPurposeId}`, item.description));\r\n            });\r\n\r\n            return {\r\n                contactMechPurposeList: res.data,\r\n                totalRecords: res.headers['x-total-count']\r\n            }\r\n        });\r\n    }\r\n\r\n    // fetch contact mech purpose by contact type\r\n    getPurposeByPostalAddresses(params) {\r\n        let _params = { ...{ 'contactMechTypeEnumId': 'CmtPostalAddress', 'pageNoLimit': true }, ...params }; // merge all\r\n        return this.getContactMechPurposes(_params);\r\n    }\r\n\r\n    getPurposeByTelecomNumbers(params) {\r\n        let _params = { ...{ 'contactMechTypeEnumId': 'CmtTelecomNumber', 'pageNoLimit': true }, ...params }; // merge all\r\n        return this.getContactMechPurposes(_params);\r\n    }\r\n\r\n    getPurposeByEmailAddresses(params) {\r\n        let _params = { ...{ 'contactMechTypeEnumId': 'CmtEmailAddress', 'pageNoLimit': true }, ...params }; // merge all\r\n        return this.getContactMechPurposes(_params);\r\n    }\r\n\r\n    getPurposeByWebAddresses(params) {\r\n        let _params = { ...{ 'contactMechTypeEnumId': 'CmtWebAddress', 'pageNoLimit': true }, ...params }; // merge all\r\n        return this.getContactMechPurposes(_params);\r\n    }\r\n\r\n    getPurposeByIpAddress(params) {\r\n        let _params = { ...{ 'contactMechTypeEnumId': 'CmtIpAddress', 'pageNoLimit': true }, ...params }; // merge all\r\n        return this.getContactMechPurposes(_params);\r\n    }\r\n\r\n\r\n\r\n    // contactMechs\r\n    \r\n\r\n    /**\r\n     * \r\n     * @param {*} params \r\n     * @returns contactMechId\r\n     */\r\n    createPostalAddress(params) {\r\n        return ServiceHandle.post(Const.API.ContactMechs + `/postalAddresses`, params).then(res => {\r\n            return res.data\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} params \r\n     * @returns contactMechId, trustLevelEnumId\r\n     */\r\n    createTelecomNumber(params) {\r\n        return ServiceHandle.post(Const.API.ContactMechs + `/telecomNumbers`, params).then(res => {\r\n            return res.data\r\n        });\r\n    }\r\n\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}